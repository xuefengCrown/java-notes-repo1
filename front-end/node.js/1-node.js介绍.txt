Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型。

运行于服务端的JavaScript解释器

Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。
发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。

V8引擎执行Javascript的速度非常快，性能非常好。Node是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。
Node 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。


##特性
Node采用一系列“非阻塞”库来支持事件循环的方式。本质上就是为文件系统、数据库之类的资源提供接口。
向文件系统发送一个请求时，无需等待硬盘（寻址并检索文件），硬盘准备好的时候非阻塞接口会通知Node。
该模型以可扩展的方式简化了对慢资源的访问， 直观，易懂。尤其是对于熟悉onmouseover、onclick等DOM事件的用户，更有一种似曾相识的感觉。

虽然让Javascript运行于服务器端不是Node的独特之处，但却是其一强大功能。不得不承认，浏览器环境限制了我们选择编程语言的自由。
任何服务器与日益复杂的浏览器客户端应用程序间共享代码的愿望只能通过Javascript来实现。
虽然还存在其他一些支持Javascript在服务器端运行的平台，但因为上述特性，Node发展迅猛，成为事实上的平台。


##Node的优点
Node作为一个新兴的前端框架，后台语言，有很多吸引人的地方：
RESTful API
单线程
	Node可以在不新增额外线程的情况下，依然可以对任务进行并发处理 —— Node.js是单线程的。
	它通过事件循环（event loop）来实现并发操作，对此，我们应该要充分利用这一点 —— 
	尽可能的避免阻塞操作，取而代之，多使用非阻塞操作。
非阻塞IO
V8虚拟机
事件驱动



##为什么会有 node.js
传统意义上的 JavaScript 运行在浏览器上，Chrome使用的 JavaScript 引擎是 V8， Node.js 是一个运行在服务端的框架，
它的底层就使用了 V8引擎引擎，这样就可以使用 JavaScript 去编写一些服务器端的程序，这样就实现了用 JavaScript 去开发 Apache + PHP
以及 Java Servlet 所开发的服务端程序，这样做的好处是前后端都采用 JavaScript，即开发一份程序既可以运行在前端也可以运行在服务端，
这样比一个应用使用多种语言在开发效率上要高。
Node.js基于时间驱动机制，在特定领域性能出色，比如用 node.js 实现消息推送、状态监控等的业务功能非常合适。






